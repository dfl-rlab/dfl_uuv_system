FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

RUN apt-get update

RUN apt-get install -y apt-utils && apt-get install -y curl gnupg2 && apt-get install -y lsb-release && apt-get clean all



# --- ROS2 Humble Installation
RUN locale  # check for UTF-8

RUN apt update && apt install -y locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

RUN echo "export LANG=en_US.UTF-8" >> /root/.bashrc

RUN locale  # verify settings

RUN apt install -y software-properties-common
RUN add-apt-repository universe
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt-get update && apt-get install -y git

RUN apt install -y ros-humble-desktop
# --- Humble has been installed


#install some tool
RUN apt install -y nano openssh-server usbutils
#for ping hardware etc...
RUN apt-get install -y iputils-ping net-tools htop build-essential

# --- gtsam ---
RUN apt install -y zip
RUN apt install -y libmetis-dev
RUN cd /tmp && git clone https://github.com/borglab/gtsam.git && cd gtsam && git checkout 4.2a9
COPY bash/compile_gtsam.bash /tmp/compile_gtsam.bash 
RUN /bin/bash -c "cd /tmp && ./compile_gtsam.bash"
# --- end of gtsam


# --- PCL --- 
RUN apt install -y libpcap-dev
RUN apt install -y libusb-1.0-0-dev
RUN cd /tmp && git clone https://github.com/PointCloudLibrary/pcl.git && cd pcl && git checkout pcl-1.15.0
COPY bash/compile_pcl.bash /tmp/compile_pcl.bash 
RUN /bin/bash -c "cd /tmp && ./compile_pcl.bash"
# --- end of PCL


# --- Serial lib ---
COPY ./pkgs/serial-foxy.zip /tmp
RUN bin/bash -c "cd /tmp && unzip serial-foxy.zip && source /opt/ros/humble/setup.bash && cd serial-foxy && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make install -j$(nproc)"

RUN apt update

# Install pip
RUN apt install -y python3-pip

RUN apt install -y libopencv-dev python3-opencv

# Install colcon
RUN apt install -y python3-colcon-common-extensions

# fix map tool
RUN apt install -y libfreeimage-dev

#install GDB
RUN apt install -y gdb

#install apriltag
RUN apt install -y ros-humble-apriltag-msgs
RUN cd /tmp && git clone https://github.com/AprilRobotics/apriltag.git && cd apriltag && git checkout 3806edf38ac4400153677e510c9f9dcb81f472c8 && cmake -B build -DCMAKE_BUILD_TYPE=Release && cmake --build build --target install

#install can stuff for scout
RUN apt install -y libasio-dev can-utils

#-----Semantic segmentation dependencies-----

#gst
RUN apt install -y libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

#install torch 2.5 and torchvision 0.20 and cudnn 9
#see: https://forums.developer.nvidia.com/t/pytorch-and-torvision-version-issue-runtimeerror-operator-torchvision-nms-does-not-exist/312446
#see: https://developer.nvidia.com/cudnn-downloads?target_os=Linux&target_arch=aarch64-jetson&Compilation=Native&Distribution=Ubuntu&target_version=22.04&target_type=deb_local
RUN apt-get install -y python3-pip libopenblas-dev

#----->install libcusparseLT for torch
#see: https://developer.nvidia.com/cusparselt-downloads?target_os=Linux&target_arch=aarch64-jetson&Compilation=Native&Distribution=Ubuntu&target_version=22.04&target_type=deb_network
RUN /bin/bash -c "cd /tmp && wget https://developer.download.nvidia.com/compute/cusparselt/0.8.1/local_installers/cusparselt-local-tegra-repo-ubuntu2204-0.8.1_0.8.1-1_arm64.deb"
RUN /bin/bash -c "cd /tmp && dpkg -i cusparselt-local-tegra-repo-ubuntu2204-0.8.1_0.8.1-1_arm64.deb"
RUN /bin/bash -c "cd /tmp && cp /var/cusparselt-local-tegra-repo-ubuntu2204-0.8.1/cusparselt-*-keyring.gpg /usr/share/keyrings/"
RUN /bin/bash -c "cd /tmp && apt update && apt install -y cusparselt-cuda-12"

#----->install cudnn for torch
RUN cd /tmp && wget https://developer.download.nvidia.com/compute/cudnn/9.13.1/local_installers/cudnn-local-tegra-repo-ubuntu2204-9.13.1_1.0-1_arm64.deb
RUN /bin/bash -c "cd /tmp && dpkg -i cudnn-local-tegra-repo-ubuntu2204-9.13.1_1.0-1_arm64.deb"
RUN /bin/bash -c "cd /tmp && cp /var/cudnn-local-tegra-repo-ubuntu2204-9.13.1/cudnn-*-keyring.gpg /usr/share/keyrings/"
RUN /bin/bash -c "cd /tmp && apt update && apt install -y cudnn9-cuda-12"

# install cudss
# see: https://forums.developer.nvidia.com/t/help-me-with-correct-pytorch-and-torchvision-versions-requirement-for-jetpack-6-2-1-orin-super/343688/32                                                                                        
RUN /bin/bash -c  "cd /tmp && wget https://developer.download.nvidia.com/compute/cudss/0.6.0/local_installers/cudss-local-tegra-repo-ubuntu2204-0.6.0_0.6.0-1_arm64.deb"
RUN /bin/bash -c  "cd /tmp && dpkg -i cudss-local-tegra-repo-ubuntu2204-0.6.0_0.6.0-1_arm64.deb"
RUN /bin/bash -c  "cd /tmp && cp /var/cudss-local-tegra-repo-ubuntu2204-0.6.0/cudss-*-keyring.gpg /usr/share/keyrings/"
RUN /bin/bash -c  "cd /tmp && apt-get update"
RUN /bin/bash -c  "cd /tmp && apt-get install -y cudss"

#----->torch 2.8 so that it support vllm 0.10 and torch vision
RUN /bin/bash -c "pip install --ignore-installed sympy==1.14.0"
RUN /bin/bash -c "cd /tmp && wget https://pypi.jetson-ai-lab.io/jp6/cu126/+f/590/92ab729aee2b8/torch-2.8.0-cp310-cp310-linux_aarch64.whl#sha256=59092ab729aee2b8937d80cc1b35d1128275bd02a7e1bc911e7efa375bd97226 torch-2.8.0-cp310-cp310-linux_aarch64.whl \
                     && python3 -m pip install --upgrade pip; python3 -m pip install --no-cache torch-2.8.0-cp310-cp310-linux_aarch64.whl"
RUN /bin/bash -c "cd /tmp && git clone https://github.com/pytorch/vision.git && cd vision && git checkout v0.23.0 && python3 setup.py install"
RUN python3 -m pip install pycuda==2025.1.2
RUN python3 -m pip install onnx==1.17.0

WORKDIR /usr/local/src 
# OpenCV
ARG OPENCV_VERSION=4.11.0
RUN curl -L -o opencv.zip https://github.com/opencv/opencv/archive/refs/tags/$OPENCV_VERSION.zip\
    && curl -L -o opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/$OPENCV_VERSION.zip\
    && unzip opencv.zip && unzip opencv_contrib.zip && cd opencv-$OPENCV_VERSION && mkdir build \
    && cd .. && rm opencv.zip opencv_contrib.zip

# check this for your gpu: https://developer.nvidia.com/cuda-gpus
ARG CUDA_ARCH=8.7
WORKDIR opencv-$OPENCV_VERSION/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local/opencv$OPENCV_VERSION \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D WITH_CUBLAS=1 \
    -D WITH_CUDA=ON \
    -D BUILD_opencv_cudacodec=OFF \
    -D WITH_OPENMP=ON \
    -D WITH_PNG=ON -D WITH_JPEG=OFF -D WITH_TIFF=ON -D WITH_WEBP=OFF -D WITH_OPENJPEG=OFF \
    -D WITH_V4L=OFF -D WITH_JASPER=OFF -D WITH_OPENEXR=OFF -D WITH_FFMPEG=OFF \
    -D WITH_QT=OFF -D WITH_GSTREAMER=ON -D BUILD_opencv_hdf=OFF \
    -D BUILD_TESTS=OFF -D BUILD_opencv_apps=OFF -D BUILD_PERF_TESTS=OFF \
    -D OPENCV_PYTHON3_INSTALL_PATH=/usr/lib/python3/dist-packages \
    -D PYTHON_EXECUTABLE=/usr/bin/python3 \
    -D OPENCV_EXTRA_MODULES_PATH=/usr/local/src/opencv_contrib-$OPENCV_VERSION/modules \
    -D CUDA_BIN_PATH=/usr/local/cuda\
    -D CUDA_ARCH_BIN=${CUDA_ARCH}\
    ..\
    && make -j$(nproc) && make install
    
#----->tensorflow for jetson
#RUN python3 -m pip install opencv-python-headless==4.11.0.86 #so that numpy is less than 2.0 for tensorflow
RUN python3 -m pip install numpy==1.26.4 #so that numpy is less than 2.0 for tensorflow
RUN python3 -m pip install https://developer.download.nvidia.com/compute/redist/jp/v61/tensorflow/tensorflow-2.16.1+nv24.08-cp310-cp310-linux_aarch64.whl


WORKDIR /root

CMD ["bash"]
